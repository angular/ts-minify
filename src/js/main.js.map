{"version":3,"sources":["main.ts"],"names":["Transpiler","Transpiler.constructor","Transpiler.compile","Transpiler.callCompile","Transpiler.transform","Transpiler.getCompilerOptions","Transpiler.createCompilerHost"],"mappings":"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","file":"main.js","sourcesContent":["///<reference path=\"../typings/node/node.d.ts\"/>\n///<reference path=\"../typings/typescript.d.ts\"/>\n\nimport ts = require('typescript');\nimport fs = require('fs'); // filesystem module\nimport util = require('util');\nimport path = require('path');\n//import process = require('process');\n\n// export const COMPILER_OPTIONS: ts.CompilerOptions = {\n// \tallowNonTsExtensions: true,\n// \tmodule: ts.ModuleKind.CommonJS,\n// \ttarget: ts.ScriptTarget.ES5,\n// };\n\n/* TranspilerOptions Class will go here */\n\n\n/* The Transpiler Class */\nexport class Transpiler {\n\tprivate output: string; // for now, what is an output object?\n\tprivate currentFile: ts.SourceFile;\n\n\t// last comment index?\n\tprivate errors: string[] = [];\n\n\t//private transpilers;\n\t// (Transpiler options here when I know what's needed) \n\n\tconstructor() {\n\t\t// will instantiate different transpilers; nothing here yet\n\n\t} \n\n\tcompile(fileNames: string[], options: ts.CompilerOptions): void {\n\t    var program = ts.createProgram(fileNames, options);\n\t    var emitResult = program.emit();\n\n\t    var allDiagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);\n\n\t    allDiagnostics.forEach(diagnostic => {\n\t        var loc = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n\t        var message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n\t        console.log(`${diagnostic.file.fileName} (${loc.line + 1},${loc.character + 1}): ${message}`);\n\t    });\n\n\t    var exitCode = emitResult.emitSkipped ? 1 : 0;\n\t    console.log(`Process exiting with code '${exitCode}'.`);\n\t    process.exit(exitCode);\n\t}\n\n\tcallCompile() {\n\t\tthis.compile(process.argv.slice(2), {\n\t\t\tnoEmitOnError: true, noImplicitAny: true,\n\t\t\ttarget: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS\n\t\t});\n\t}\n\n\ttransform() {\n\n\t}\n\n\t// return set options for the compiler\n\tprivate getCompilerOptions(): ts.CompilerOptions {\n\t\tconst options: ts.CompilerOptions = {\n\t\t\tallowNonTsExtensions: true,\n\t\t\tmodule: ts.ModuleKind.CommonJS,\n\t\t\ttarget: ts.ScriptTarget.ES6,\n\t\t};\n\t\treturn options;\n\t}\n\n\t/* Create a Transpiler Class */\n\tcreateCompilerHost(fileNames: string[], options?: ts.CompilerOptions): ts.CompilerHost {\n\t\tconsole.log(\"create compiler host\");\n\t\tconsole.log(fileNames);\n\n\t\t// why is this needed? rather, what is the point?\n\t\tvar fileMap: { [s: string]: boolean } = {};\n\t\tfileNames.forEach((f) => fileMap[f] = true); // why?\n\n\t\t// sanity check that given files actually exist\n\t\tfileNames.forEach((fpath) => {\n\t\t\tfs.exists(fpath, function(exists) {\n\t\t\t\tconsole.log(exists ? \"exists\" : \"nope :(\");\n\t\t\t});\n\t\t});\n\n\t\t// the methods of a compiler host object\n\t\treturn {\n\t\t\tgetSourceFile: (sourceName, languageVersion) => {\n\t\t\t\tconsole.log('does this occur');\n\t\t\t\tif (fileMap.hasOwnProperty(sourceName)) {\n\t\t\t\t\tconsole.log('hello?');\n\t\t\t\t\tvar contents = fs.readFileSync(sourceName, 'UTF-8');\n\t\t\t\t\tconsole.log(contents);\n\t\t\t\t\treturn ts.createSourceFile(sourceName, contents, this.getCompilerOptions().target, true);\n\t\t\t\t} \n\t\t\t\tif (sourceName === \"lib.d.ts\")\n\t\t\t\t\treturn ts.createSourceFile(sourceName, '', this.getCompilerOptions().target, true);\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\t// these are not used; just exist to satisfy interface?\n\t\t\twriteFile: function(name, text, writeByteOrderMark, outputs) {\n\t\t\t\tfs.writeFile(name, text);\n\t\t\t},\n\t\t\tgetDefaultLibFileName: function() { return \"lib.d.ts\"; },\n\t\t\tuseCaseSensitiveFileNames: function() { return true; },\n\t\t\tgetCanonicalFileName: function(filename) { return filename; },\n\t\t\tgetCurrentDirectory: function() { return \"\"; },\n\t\t\tgetNewLine: function() { return \"\\n\"; }\n\t\t};\n\t}\n}\n\nvar transpiler = new Transpiler();\n// var host = transpiler.createCompilerHost(['test/hello.ts']);\n// var source = host.getSourceFile('test/hello.ts', ts.ScriptTarget.ES6);\n// console.log(source);\ntranspiler.callCompile();\n"],"sourceRoot":"/source/"}
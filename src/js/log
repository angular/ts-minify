created compmiler host
hello?
../../test/hello.ts
==========================================================
class Greeter {
    constructor(public greeting: string, public name: string) { 
    }
    greet() {
        return "<h1>" + this.name + "says: " + this.greeting + "</h1>";
    }
};
var greeter = new Greeter("Hello, world!", 7);
var str = greeter.greet();
document.body.innerHTML = str;


==========================================================
hello?
../../test/hello.ts
==========================================================
class Greeter {
    constructor(public greeting: string, public name: string) { 
    }
    greet() {
        return "<h1>" + this.name + "says: " + this.greeting + "</h1>";
    }
};
var greeter = new Greeter("Hello, world!", 7);
var str = greeter.greet();
document.body.innerHTML = str;


==========================================================
PropertyAccessExpression
========================================================
{ pos: 124,
  end: 134,
  expression: { pos: 124, end: 129, parserContextFlags: 1, parent: [Circular] },
  dotToken: { pos: 129, end: 130, parserContextFlags: 1, parent: [Circular] },
  name: 
   { pos: 130,
     end: 134,
     text: 'name',
     parserContextFlags: 1,
     parent: [Circular] },
  parserContextFlags: 1,
  parent: 
   { pos: 115,
     end: 134,
     left: 
      { pos: 115,
        end: 122,
        text: '<h1>',
        parserContextFlags: 1,
        parent: [Circular] },
     operatorToken: { pos: 122, end: 124, parserContextFlags: 1, parent: [Circular] },
     right: [Circular],
     parserContextFlags: 1,
     parent: 
      { pos: 115,
        end: 145,
        left: [Circular],
        operatorToken: [Object],
        right: [Object],
        parserContextFlags: 1,
        parent: [Object] } } }
